{"tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"Django Email Manager\r\n-----------\r\n\r\n![Continuous Integration Status](https://secure.travis-ci.org/paulocheque/django-email-manager.png?branch=master)\r\n\r\nA simple application to manage emails sent by a Django application.\r\n\r\n# Installation\r\n\r\n```\r\npip install django-email-manager\r\n```\r\n\r\nor\r\n\r\n```\r\n  # Download zip file\r\n  # Extract it\r\n  # Execute in the extracted directory: python setup.py install\r\n```\r\n\r\n#### Upgrade\r\n\r\n```\r\npip install django-email-manager --upgrade --no-deps\r\n```\r\n\r\n# Motivation\r\n\r\n* Problem: Bad control of what and how many e-mails have being sent to users.\r\n* Solution: A simple table that log a summary of each e-mail had been sent. \r\nA daily routine avoid this table grows uncontrolled and use the data to generate statistics.\r\n\r\n* Problem: Important e-mails are deleted from the database when a user change his e-mail.\r\n* Solution: A simple table that store all e-mails independently.\r\n\r\n* Usually, good systems do not send attachments by e-mail because this a open door to attacks.\r\n\r\n# Configuration\r\n\r\n* settings.py:\r\n\r\n\r\n```python\r\nINSTALLED_APPS = (\r\n    'django.contrib.auth',\r\n    'django.contrib.admin',\r\n    'email_manager',\r\n)\r\n\r\n# This attribute activates a listener to store all e-mails independently of auth_user database.\r\nEMAIL_DATABASE_ACTIVATED = True\r\n\r\n# If you want to use celery for sending e-mails, you can customize the task name, example:\r\nEMAIL_MANAGER_USING_CELERY = True # default = False\r\nEMAIL_MANAGER_TASK = 'email-manager-task' # default = None\r\n```\r\n\r\n* urls.py\r\n\r\n\r\n```python\r\nfrom django.contrib import admin\r\nadmin.autodiscover()\r\n\r\nurlpatterns = patterns('',\r\n     url(r'^admin/', include(admin.site.urls)),\r\n     (r'^email-manager/', include('email_manager.urls', namespace='email_manager', app_name='email_manager')),\r\n)\r\n```\r\n\r\n* Templates:\r\n\r\n\r\n```python\r\n{% url email_manager:define_email_preferences user.id %}\r\n{% if user.is_superuser %}\r\n    {% url email_manager:send_email_to_groups %}\r\n    {% url email_manager:send_email_to_users %}\r\n    {% url email_manager:update_statistics %}\r\n{% endif %}\r\n```\r\n\r\n# Usage\r\n\r\n* Manual Test:\r\n\r\n\r\n```\r\n/email-manager/send-email-to-groups/\r\n/email-manager/send-email-to-users/\r\n/email-manager/update-statistics/\r\n/email-manager/define_email_preferences/USER_ID\r\n```\r\n\r\n* Send e-mails directly in source code:\r\n\r\n\r\n```python\r\nfrom email_manager.feature_send_email import EmailSender\r\nEmailSender().send_email(emails, subject, text_content, html_content, main_content)\r\nEmailSender().send_email_to_users(users, additional_emails, subject, content, html_content, email_type)\r\nEmailSender().send_email_to_groups(groups, additional_emails, subject, content, html_content, email_type)\r\n```\r\n\r\n* Manual updating statistics:\r\n\r\n\r\n```\r\npython manage.py update_email_statistics\r\n```\r\n\r\n# Change Log\r\n\r\n## Version 0.2.0 \r\n  * 2012/02/11 (yyyy/mm/dd)\r\n  * <http://pypi.python.org/pypi/django-email-manager/0.2.0>\r\n  * Now emails can have types and users can define which types of e-mails they want to receive.\r\n\r\n## Version 0.1.0\r\n  * 2012/02/05 (yyyy/mm/dd)\r\n  * <http://pypi.python.org/pypi/django-email-manager/0.1.0>\r\n  * Initial version\r\n\r\n\r\n# TODO:\r\n\r\n* Auto update statistics\r\n* Simple graphs and reports\r\n","name":"Django-email-manager"}